Create New Configurations
The next major code block is the actual configuration of the Application, Save_The_Planet, which needs to have a few fields updated for your new Application, Save_The_Network. Although this is all one large block, we break it up to discuss each sub-section's purpose.

Comments have been added within the code blocks to explain the purpose of each line; you do not need to add these to your file. Comments with ## are used to indicate that an update is required in the following line.

Modify the Application and EPGs
The first line of code will create a new Applicaton Profile, which is the parent object for EPGs. Since the three EPGs you will create belong to the same Application; you only need to create one Application object, and each new EPG will reference this Managed Object.

Change the name argument to use the application variable created in the beginning the code.

## the Application name "Save_The_Planet" should be changed to the application variable
fvAp = cobra.model.fv.Ap(fvTenant, ownerKey=u'', name=application, prio=u'unspecified', ownerTag=u'', descr=u'')
Create the "app" EPG
The first few lines of code can be grouped together as they all relate to the same EPG. The configuration line for creating the new EPG object will not need to be changed since the EPG's name will be the same as the EPG in "Save_The_Planet." Also the EPG is associated to an Application Profile by referencing the object, fvAP. As long as that object has been changed, and this was done in the previous step, then the App Profile object will be referencing the new App Profile.

The encap and tnFvBDName arguments need to be updated to use the vlan1 and bridge_domain variables.

Lines that need to be updated will contain a comment beginning with ##.

# create the first EPG underneath your new Application.
fvAEPg = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg=u'no', matchT=u'AtleastOne', prio=u'unspecified', name=u'app', descr=u'')

# have the EPG created by the previous line of code consume the "sql" contract.
fvRsCons = cobra.model.fv.RsCons(fvAEPg, tnVzBrCPName=u'sql', prio=u'unspecified')

# assign a VLAN and vPC to the EPG represented by fvAEPg
## the encap should be changed to use the vlan1 variable
fvRsPathAtt = cobra.model.fv.RsPathAtt(fvAEPg, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2B]', instrImedcy=u'lazy', encap=vlan1, descr=u'', mode=u'regular')

# assign a VLAN and a second vPC to the EPG represented by fvAEPg
## the encap should be changed to use the vlan1 variable
fvRsPathAtt2 = cobra.model.fv.RsPathAtt(fvAEPg, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2A]', instrImedcy=u'lazy', encap=vlan1, descr=u'', mode=u'regular')

# creates a relationship between the EPG represented by fvAEPg and a Physical Domain.
# this determines what encapsulation values can be used.
fvRsDomAtt = cobra.model.fv.RsDomAtt(fvAEPg, instrImedcy=u'lazy', resImedcy=u'lazy', encap=u'unknown', tDn=u'uni/phys-Heroes_phys')

# sets the QoS policy for the EPG represented by fvAEPg
fvRsCustQosPol = cobra.model.fv.RsCustQosPol(fvAEPg, tnQosCustomPolName=u'')

# this assigns the Bridge Domain that hosts in fvAEPg will belong to. the Bridge
# Domain provides a flooding domain and a set of subnets the hosts can belong to.
## the Bridge Domain name should be changed from "Hero_Land" to the bridge_domain variable
fvRsBd = cobra.model.fv.RsBd(fvAEPg, tnFvBDName=bridge_domain)

# have the EPG represented by the fvAEPg object provide the "power_up" contract
fvRsProv = cobra.model.fv.RsProv(fvAEPg, tnVzBrCPName=u'power_up', matchT=u'AtleastOne', prio=u'unspecified')
Create the "db" EPG
The Next few lines of code are very similar to the previous block, but each object name is slightly different to create a new instance of the object type.

The encap and tnFvBDName arguments need to be updated to use the vlan2 and bridge_domain variables.

Lines that need to be updated will contain a comment beginning with ##.

# creates a new EPG object represented by the name fvAEPg2
fvAEPg2 = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg=u'no', matchT=u'AtleastOne', prio=u'unspecified', name=u'db', descr=u'')

# assign a VLAN and vPC to the EPG represented by fvAEPg2
## the encap should be changed to use the vlan2 variable
fvRsPathAtt3 = cobra.model.fv.RsPathAtt(fvAEPg2, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2B]', instrImedcy=u'lazy', encap=vlan2, descr=u'', mode=u'regular')

# assign a VLAN and a second vPC to the EPG represented by fvAEPg2
## the encap should be changed to use the vlan2 variable"
fvRsPathAtt4 = cobra.model.fv.RsPathAtt(fvAEPg2, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2A]', instrImedcy=u'lazy', encap=vlan2, descr=u'', mode=u'regular')

# creates a relationship between the EPG represented by fvAEPg2 and a Physical Domain.
fvRsDomAtt2 = cobra.model.fv.RsDomAtt(fvAEPg2, instrImedcy=u'lazy', resImedcy=u'lazy', encap=u'unknown', tDn=u'uni/phys-Heroes_phys')

# sets the QoS policy for the EPG represented by fvAEPg2
fvRsCustQosPol2 = cobra.model.fv.RsCustQosPol(fvAEPg2, tnQosCustomPolName=u'')

# this assigns the Bridge Domain that hosts in the fvAEPg2 will belong to
## the Bridge Domain name should be changed from "Hero_Land" to the bridge_domain variable
fvRsBd2 = cobra.model.fv.RsBd(fvAEPg2, tnFvBDName=bridge_domain)

# have the EPG represented by the fvAEPg2 object provide the "sql" contract
fvRsProv2 = cobra.model.fv.RsProv(fvAEPg2, tnVzBrCPName=u'sql', matchT=u'AtleastOne', prio=u'unspecified')
Create the "web" EPG
The Next few lines of code are also very similar to the previous block, but each object name is slightly different to create a new instance of the object type.

The encap and tnFvBDName arguments need to be updated to use the vlan3 and bridge_domain variables.

Lines that need to be updated will contain a comment beginning with ##.

# creates a new EPG object represented by the name fvAEPg3
fvAEPg3 = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg=u'no', matchT=u'AtleastOne', prio=u'unspecified', name=u'web', descr=u'')

# have the EPG created by the previous line of code consume the "sql" contract.
fvRsCons2 = cobra.model.fv.RsCons(fvAEPg3, tnVzBrCPName=u'sql', prio=u'unspecified')

# assign a VLAN and vPC to the EPG represented by fvAEPg3
## the encap should be changed to use the vlan3 variable
fvRsPathAtt5 = cobra.model.fv.RsPathAtt(fvAEPg3, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2B]', instrImedcy=u'lazy', encap=vlan3, descr=u'', mode=u'regular')

# assign a VLAN and a second vPC to the EPG represented by fvAEPg3
## the encap should be changed to use the vlan3 variable
fvRsPathAtt6 = cobra.model.fv.RsPathAtt(fvAEPg3, tDn=u'topology/pod-1/protpaths-101-102/pathep-[Heroes_FI-2A]', instrImedcy=u'lazy', encap=vlan3, descr=u'', mode=u'regular')

# creates a relationship between the EPG represented by fvAEPg3 and a Physical Domain.
fvRsDomAtt3 = cobra.model.fv.RsDomAtt(fvAEPg3, instrImedcy=u'lazy', resImedcy=u'lazy', encap=u'unknown', tDn=u'uni/phys-Heroes_phys')

# sets the QoS policy for the EPG represented by fvAEPg3
fvRsCustQosPol3 = cobra.model.fv.RsCustQosPol(fvAEPg3, tnQosCustomPolName=u'')

# this assigns the Bridge Domain that hosts in the fvAEPg3 will belong to
## the Bridge Domain name should be changed from "Hero_Land" to the bridge_domain variable
fvRsBd3 = cobra.model.fv.RsBd(fvAEPg3, tnFvBDName=bridge_domain)

# have the EPG represented by the fvAEPg3 object provide the "web" contract
fvRsProv3 = cobra.model.fv.RsProv(fvAEPg3, tnVzBrCPName=u'web', matchT=u'AtleastOne', prio=u'unspecified')
Commit the Configuration
The final piece is to submit the configuration changes to the APIC. This is done by creating a config request, adding the top level object to the request, and commiting the changes.

# commit the generated code to APIC
print toXMLStr(fvTenant)
c = cobra.mit.request.ConfigRequest()
c.addMo(fvTenant)
md.commit(c)