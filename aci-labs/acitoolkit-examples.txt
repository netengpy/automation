- Create a Session with the APIC

>>> session = Session(URL, LOGIN, PASSWORD)
>>> session.login()
<Response [200]>
>>>

- Create a Tenant with a VRF

# Create a Variable for your Tenant Name
# Use your initials in the name
# Example: "tenant_name = "js_Toolkit_Tenant""
>>> tenant_name = "INITIALS_Example_Tenant"
>>> tenant = Tenant(tenant_name)
>>> vrf = Context("Example_VRF", tenant)
>>>

- Create a Bridge Domain Associated with the Tenant and VRF

>>> bridge_domain = BridgeDomain("Example_BD", tenant)
>>> bridge_domain.add_context(vrf)
>>>

- Add a Public Subnet to the Bridge Domain

>>> subnet = Subnet("Example_Subnet", bridge_domain)
>>> subnet.set_scope("public")
>>> subnet.set_addr("10.10.10.1/24")
>>>

- Create an HTTP Filter Associated with the Tenant

>>> filter_http = Filter("http", tenant)
>>>

A- dd an HTTP Filter Entry to the HTTP Filter

>>> filter_entry_tcp80 = FilterEntry("tcp-80", filter_http, etherT="ip", prot="tcp", dFromPort="http", dToPort="http")
>>>

- Create Another Filter and Filter Entry for SQL

>>> filter_sql = Filter("sql", tenant)
>>> filter_entry_tcp1433 = FilterEntry("tcp-1433", filter_sql, etherT="ip", prot="tcp", dFromPort="1433", dToPort="1433")
>>>

- Create a Web Contract Associated with the Tenant

>>> contract_web = Contract("web", tenant)
>>>

- Add an HTTP Contract Subject with a Filter to the Contract

>>> contract_subject_http = ContractSubject("http", contract_web)
>>> contract_subject_http.add_filter(filter_http)
>>>

- Create another Contract and Contract Subject for SQL

>>> contract_database = Contract("database", tenant)
>>> contract_subject_sql = ContractSubject("sql", contract_database)
>>> contract_subject_sql.add_filter(filter_sql)
>>>

- Create an Application Profile Associated with the Tenant

>>> app_profile = AppProfile("Example_App", tenant)
>>>

- Add a Web EPG to the App Profile and Associate a Bridge Domain and Contracts

>>> epg_web = EPG("Web", app_profile)
>>> epg_web.add_bd(bridge_domain)
>>> epg_web.provide(contract_web)
True
>>> epg_web.consume(contract_database)
True
>>>

- Create Another EPG for Databases

>>> epg_database = EPG("Database", app_profile)
>>> epg_database.add_bd(bridge_domain)
>>> epg_database.provide(contract_database)
True
>>>

====================
>>> tenant_list = Tenant.get(session)
>>> tenant_list
[<acitoolkit.acitoolkit.Tenant object at 0x7fe0ef8bda50>, <acitoolkit.acitoolkit.Tenant object at 0x7fe0eedfe510>,

<acitoolkit.acitoolkit.Tenant object at 0x7fe0eedfe3d0>, <acitoolkit.acitoolkit.Tenant object at 0x7fe0eedfe590>]
>>>
>>> for tn in tenant_list:
...     print(tn.name)
...
common
infra
mgmt
Heroes
>>>
====================
>>> print("\n{}\n\n{}".format(tenant.get_url(), tenant.get_json()))

>>> import json
>>> print(json.dumps(tenant.get_json(), sort_keys=True, indent=2, separators=(',',':')))
====================

- Commit Configuration to the APIC

>>> resp = session.push_to_apic(tenant.get_url(), data=tenant.get_json())
>>>

- Print Back the Results

>>> if resp.ok:
...      print("\n{}: {}\n\n{} is ready for use".format(resp.status_code, resp.reason, tenant.name))
>>> else:
...      print("\n{}: {}\n\n{} was not created!\n\n Error: {}".format(resp.status_code, resp.reason, subnet.name, resp.content))
...      

200: OK

Example_Tenant is ready for use
>>>

- Validating Configuration Items

>>> new_tenant_list = Tenant.get(session)
>>> for tn in new_tenant_list:
...     print(tn.name)
...
common
infra
Heroes
mgmt
Example_Tenant

>>> app_list = AppProfile.get(session, tenant)
>>> for app in app_list:
...     print(app.name)
...
Example_App
>>>

>>> epg_list = EPG.get(session, app_profile, tenant)
>>> for epg in epg_list:
...     print(epg.name)
...
Database
Web
>>>


=======================================================================

>>> from credentials import *
>>> from acitoolkit import acitoolkit
>>>
# connect to the apic
>>> session = acitoolkit.Session(URL, LOGIN, PASSWORD)
>>> session.login()
<Response [200]>
>>>
# Create a Variable for your Tenant Name
# Use your initials in the name
# Example: "tenant_name = "js_Toolkit_Tenant""
>>> tenant_name = "INITIALS_Toolkit_Tenant"
# create a new tenant
>>> new_tenant = acitoolkit.Tenant(tenant_name)
>>>
# commit the new configuration
>>> session.push_to_apic(new_tenant.get_url(), new_tenant.get_json())
<Response [200]>
>>>


>>> from credentials import *
>>> import cobra.mit.access
>>> import cobra.mit.request
>>> import cobra.mit.session
>>> import cobra.model.fv
>>> import cobra.model.pol
>>>
# connect to the apic
>>> auth = cobra.mit.session.LoginSession(URL, LOGIN, PASSWORD)
>>> session = cobra.mit.access.MoDirectory(auth)
>>> session.login()
SSL Warning
>>>
# Create a Variable for your Tenant Name
# Use your initials in the name
# Example: "tenant_name = "js_Toolkit_Tenant""
>>> tenant_name = "INITIALS_Cobra_Tenant"
# create a new tenant
>>> root = cobra.model.pol.Uni('')
>>> new_tenant = cobra.model.fv.Tenant(root, tenant_name)
>>>
# commit the new configuration
>>> config_request = cobra.mit.request.ConfigRequest()
>>> config_request.addMo(new_tenant)
>>> session.commit(config_request)
SSL Warning
<Response [200]>
>>>





